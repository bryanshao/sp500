
name: ticker
description: >
  historical data for a specific ticker.

dependencies:
  "lib.urlgenerator": urlgenerator

transform:
  - step: Set Schema
    action: transform.schema.SetSchema
    fields:
      - name: TradeDate
        type: date
      - name: Open
        type: string
      - name: High
        type: string
      - name: Low
        type: string
      - name: Close
        type: string
      - name: Volume
        type: integer

  - step: Filter invalid tickers
    action: transform.filter.FilterRecords
    ignore_empty_records: yes

  - step: Fetch Ticker url data
    action: urlgenerator.TickerURL

  - step: Read CSV
    action: extract.formats.CSV.ReadRecords

  - step: Filter invalid tickers
    action: transform.filter.FilterRecords
    filter_list:
      - record_offset: 0
        match:
        - field_name: TradeDate
          patterns:
            - '^Date$'

  - step: Parse date field
    action: transform.conversion.ParseDatetime
    fields:
      - field_name: TradeDate
        date_only: yes
        formats:
          - "MM/DD/YYYY"
          - "M/DD/YYYY"
          - "M/D/YYYY"

load:
  - step: Set the datapath
    action: load.SetTableName
    table_name: concourse.demo.sp500

  - step: Send to Assembly
    action: load.OutputAbstract
    trusted: yes
    db_boundary: concourse.demo
    repository: '{ context.repository }'
    credentials: '{ context.credentials }'
